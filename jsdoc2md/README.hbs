[![view on npm](http://img.shields.io/npm/v/jsdoc-to-markdown.svg)](https://www.npmjs.org/package/jsdoc-to-markdown)
[![npm module downloads](http://img.shields.io/npm/dt/jsdoc-to-markdown.svg)](https://www.npmjs.org/package/jsdoc-to-markdown)
[![Build Status](https://travis-ci.org/jsdoc2md/jsdoc-to-markdown.svg?branch=master)](https://travis-ci.org/jsdoc2md/jsdoc-to-markdown)
[![Dependency Status](https://david-dm.org/jsdoc2md/jsdoc-to-markdown.svg)](https://david-dm.org/jsdoc2md/jsdoc-to-markdown)
[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](https://github.com/feross/standard)
[![Join the chat at https://gitter.im/jsdoc2md/jsdoc2md](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/jsdoc2md/jsdoc2md?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)

***[Try the jsdoc2md v2 pre-release](https://github.com/jsdoc2md/jsdoc-to-markdown/releases)***

# jsdoc-to-markdown
[jsdoc](http://usejsdoc.org) documented source code in, markdown format API documentation out.

## Synopsis
write documented code:
```js
/**
a quite wonderful function
@param {object} - privacy gown
@param {object} - security
@returns {survival}
*/
function protection(cloak, dagger){}
```

run a command:
```
$ jsdoc2md example/src/protection.js
```

get markdown docs! (in [github-flavored-markdown](https://help.github.com/articles/github-flavored-markdown/) format by default)
```handlebars
<a name="protection"></a>
## protection(cloak, dagger) â‡’ <code>survival</code>
a quite wonderful function

| Param  | Type                | Description  |
| ------ | ------------------- | ------------ |
| cloak  | <code>object</code> | privacy gown |
| dagger | <code>object</code> | security     |
```

this command achieves the same result:
```sh
$ jsdoc-parse example/function.js | dmd
```
## Features

- Insert API documention into a README, or any arbitrary document.
- Customisable to a granular level. If the output doesn't suit you, change it.
- Package your modifications, publish to npm and share with others (e.g. [dmd-bitbucket](https://github.com/jsdoc2md/dmd-bitbucket))
- Accepts `.js` or `.html` input files (parsing html is experimental - [more](https://github.com/jsdoc2md/jsdoc-parse/))
- Extends jsdoc with some new tags ([more](https://github.com/jsdoc2md/jsdoc-parse/))
- Use any arbitrary tag, e.g. `@fulfil`, `@reject`, `@hatredlevel` etc.

## Example output
Some example output creating using `jsdoc2md`.

### Generated README files
These projects insert jsdoc2md output into a readme template.

<table>
  <thead>
    <tr><th>Project</th><th>Notes</th></tr>
  </thead>
  <tbody>
    <tr>
      <td><a href="https://github.com/75lb/handbrake-js">handbrake-js</a></td>
      <td>
        <p>A module exposing two methods and an inner class. The API docs are inserted into <a href="https://github.com/75lb/handbrake-js/tree/master/jsdoc2md">this README template</a> by this command: <br>
        <code>$ jsdoc2md --template jsdoc2md/README.hbs lib/*.js</code></p>
      </td>
    </tr>
    <tr>
      <td><a href="https://github.com/75lb/command-line-args">command-line-args</a></td>
      <td>Demonstrates documentation of ES2015 classes plus the <strong><code>@module</code></strong>, <strong><code>@typicalname</code></strong>, <strong><code>@throws</code></strong> and <strong><code>@alias</code></strong> tags.</td>
    </tr>
    <tr>
      <td><a href="https://github.com/75lb/array-tools#api-reference">array-tools</a></td>
      <td>Very simple module exporting a collection of static methods. Demonstrates use of <strong><code>@category</code></strong> to group identifiers in the member-list.</td>
    </tr>
    <tr>
      <td><a href="https://github.com/jesucarr/tokenbucket">jesucarr/tokenbucket</a></td>
      <td>Demonstrates <strong><code>--param-list-format list</code></strong> and the documentation of Promises using the <strong><code>@fulfil</code></strong> and <strong><code>@reject</code></strong> tags.</td>
    </tr>
    <tr>
      <td><a href="https://github.com/75lb/ansi-escape-sequences">ansi-escape-sequences</a></td>
      <td>Demonstrates usage of <strong><code>@enum {type}</code></strong> (rendered in table format).</td>
    </tr>
  </tbody>
</table>

### Tags
You can see an example of how each [jsdoc tag](http://usejsdoc.org) looks when rendered [here](https://github.com/jsdoc2md/jsdoc-to-markdown/tree/master/example/tags).

### Examples demonstrating various options

To get an idea of the affects the various options have:

- [formatting options](https://github.com/jsdoc2md/jsdoc-to-markdown/tree/master/example/options/dmd%20options)
  - [example-lang](https://github.com/jsdoc2md/jsdoc-to-markdown/tree/master/example/options/dmd%20options/example-lang)
  - [module-index-format](https://github.com/jsdoc2md/jsdoc-to-markdown/blob/master/example/options/dmd%20options/module-index-format)
  - [global-index-format](https://github.com/jsdoc2md/jsdoc-to-markdown/tree/master/example/options/dmd%20options/global-index-format)
  - [member-index-format](https://github.com/jsdoc2md/jsdoc-to-markdown/blob/master/example/options/dmd%20options/member-index-format)
  - [param-list-format](https://github.com/jsdoc2md/jsdoc-to-markdown/blob/master/example/options/dmd%20options/param-list-format)
  - [property-list-format](https://github.com/jsdoc2md/jsdoc-to-markdown/blob/master/example/options/dmd%20options/property-list-format)
  - [no-gfm](https://github.com/jsdoc2md/jsdoc-to-markdown/tree/master/example/options/dmd%20options/no-gfm)
  - [separators](https://github.com/jsdoc2md/jsdoc-to-markdown/blob/master/example/options/dmd%20options/separators)
  - [name format](https://github.com/jsdoc2md/jsdoc-to-markdown/blob/master/example/options/dmd%20options/name-format)
- [parse options](https://github.com/jsdoc2md/jsdoc-to-markdown/tree/master/example/options/jsdoc-parse%20options)
  - [html](https://github.com/jsdoc2md/jsdoc-to-markdown/tree/master/example/options/jsdoc-parse%20options/html)
  - [sort-by](https://github.com/jsdoc2md/jsdoc-to-markdown/tree/master/example/options/jsdoc-parse%20options/sort-by)

### Scripting examples
If you can't achieve what you need using the command-line tool you can write a custom script.

- [generate one markdown file per class](https://github.com/jsdoc2md/jsdoc-to-markdown/tree/master/example/scripting/output-file-per-class)

### Templating examples
The default jsdoc2md output might not always suit you. You can supply your using own template using the `template` option. You can see the template used to generate this README [here](https://github.com/jsdoc2md/jsdoc-to-markdown/blob/master/jsdoc2md/README.hbs).

#### Selectors
- Cherry-pick which documentation appears in the output using [selector helpers](https://github.com/jsdoc2md/jsdoc-to-markdown/tree/master/example/templating/selector%20helpers).
  - [\{{#module}}](https://github.com/jsdoc2md/jsdoc-to-markdown/tree/master/example/templating/selector%20helpers/module)
  - [\{{#class}}](https://github.com/jsdoc2md/jsdoc-to-markdown/tree/master/example/templating/selector%20helpers/class)

### Exemplary APIs
See [the wiki](https://github.com/jsdoc2md/jsdoc-to-markdown/wiki/Exemplary-APIs) for more great API examples. Feel free to add your own!


## Install and use
First, document your source code using [correct jsdoc syntax](http://usejsdoc.org) then run it through jsdoc-to-markdown using one of the following methods (all tested on Mac OSX, Linux, Windows 8.1 and Windows XP):

### Command-line tool
To install the `jsdoc2md` command-line tool globally, run:
```
$ npm install -g jsdoc-to-markdown
```

Some typical use cases:

```sh
$ # dump everything you have into a single file
$ jsdoc2md "src/**/*.js" > api.md
```

```sh
$ # split into separate files
$ jsdoc2md src/main-module.js > main-module.md
$ jsdoc2md src/important-class.js > important-class.md
```

```sh
$ # embed documentation into a template you made
$ jsdoc2md "src/**/*.js" --template readme.hbs > README.md
```

#### Note on globbing
General rule: if your file expression contains `**` yet recursion is failing, wrap the expression in quotes (e.g. `"lib/**/*.js"`).

If wrapped in quotes, bash (or your shell) will not attempt file-name expansion on the expression. If you do not use quotes you will require bash version 4+ with globstar enabled for recursion to work.

### Add a "generate docs" task to your project workflow
#### As an `npm run` task
This is the most lightweight way to add the task - no additional task-running software required. First:
```sh
$ npm install jsdoc-to-markdown --save-dev
```

Then, in the `"scripts"` section of `package.json`, add a `docs` task. For example:
```json
{
  "scripts": {
    "docs": "jsdoc2md lib/*.js > api.md"
  }
}
```
Now, project documentation is generated like so:

```sh
$ npm run docs
```

#### As a grunt task
See [grunt-jsdoc-to-markdown](https://github.com/jsdoc2md/grunt-jsdoc-to-markdown).

#### As a gulp task
See [gulp-jsdoc-to-markdown](https://github.com/jsdoc2md/gulp-jsdoc-to-markdown).

## Contributing
Issue reports and patches are encouraged. And the project would benefit from an additional maintainer..

### Composition
Essentially, jsdoc2d connects the output of [jsdoc-parse](https://github.com/jsdoc2md/jsdoc-parse) to the input of [dmd](https://github.com/jsdoc2md/dmd). dmd uses the [ddata](https://github.com/jsdoc2md/ddata) helper library (also shared by [dhtml](https://github.com/jsdoc2md/dhtml)) and [stream-handlebars](https://github.com/75lb/stream-handlebars) to generate the output.

## API Reference
{{#module name="jsdoc-to-markdown"~}}
{{>body~}}
{{>members~}}
{{/module}}

{{depthIncrement}}
{{#identifier longname="module:dmd~DmdOptions"~}}
{{>docs}}
{{/identifier}}

{{#identifier longname="module:jsdoc-parse~ParseOptions"~}}
{{>docs}}
{{/identifier}}

* * *

&copy; 2014-16 Lloyd Brookes \<75pound@gmail.com\>. Documented by [jsdoc-to-markdown](https://github.com/jsdoc2md/jsdoc-to-markdown).
