[![view on npm](http://img.shields.io/npm/v/jsdoc-to-markdown.svg)](https://www.npmjs.org/package/jsdoc-to-markdown)
[![npm module downloads per month](http://img.shields.io/npm/dm/jsdoc-to-markdown.svg)](https://www.npmjs.org/package/jsdoc-to-markdown)
[![Dependency Status](https://david-dm.org/75lb/jsdoc-to-markdown.svg)](https://david-dm.org/75lb/jsdoc-to-markdown)
![Analytics](https://ga-beacon.appspot.com/UA-27725889-32/jsdoc-to-markdown/README.md?pixel)

***work in progress, unstable, draft documentation***

#jsdoc-to-markdown
[Documented](http://usejsdoc.org) source code in, markdown out.. In development, any feedback welcome.

This app is composed from the lower-level [jsdoc-parse](https://github.com/75lb/jsdoc-parse) and [documenter-md](https://github.com/75lb/documenter-md) modules.

##examples
These projects have readme files rendered by `jsdoc2md`:
* [handbrake-js](https://github.com/75lb/handbrake-js) (exports an object with inner class)
* [array-tools](https://github.com/75lb/array-tools) (exports a object)
* [file-set](https://github.com/75lb/file-set) (exports a class)
* [command-line-args](https://github.com/75lb/command-line-args)  (exports a class)

##Install
Ensure [node.js](http://nodejs.org) is installed first. Linux/Mac users may need to run the following commands with `sudo`.

###Globally
```sh
$ npm install -g jsdoc-to-markdown
```

###Bundled with your project
In my opinion, this is the most efficient solution (no task runner required).
```sh
$ npm install jsdoc-to-markdown --save-dev
```

Then add an `docs` build task to your `package.json` scripts, e.g.:
```json
{
  "name": "my-web-app",
  "version": "1.0.0",
  "scripts": {
    "docs": "jsdoc2md lib/*.js"
  }
}
```
Docs are generated like so:

```sh
$ npm run docs
```

###As a grunt plug-in
See [grunt-jsdoc-to-markdown](https://github.com/75lb/grunt-jsdoc-to-markdown).

###As a gulp plug-in
Use a task like this until the gulp plugin is ready, you should only need to edit `src` and `outputFile`: 

```js
var jsdoc2md = require("jsdoc-to-markdown");
var gutil = require("gulp-util");
var fs = require("fs");

gulp.task("docs", function(done){
    var src = "lib/**/*.js";
    var outputFile = "api.md";
    gutil.log("writing documentation to " + outputFile);
    jsdoc2md.render(src).pipe(fs.createWriteStream(outputFile));
});
```

##Usage
Document your source code using [correct jsdoc syntax](http://usejsdoc.org), then run it through `jsdoc2md`. If no `<source_files>` are supplied it will look for doclet data on `stdin`. 
```
$ jsdoc2md [<options>] [<source_files>]
$ cat doclets.json | jsdoc2md [<options>]

-t, --template <string>   A custom handlebars template to insert the rendered documentation into
-j, --json                Output the template data only
-v, --verbose             More verbose output and error reporting
-h, --help                Print usage information
--src <array>             The javascript source files. The default option.
--private                 Include symbols marked @private in the output
--heading-depth <number>  root heading depth to begin the documentation from, defaults to 1 (`#`).
-s, --stats               Print a few stats about the doclets parsed.
```

##API Reference
{{>specific-module-body name="jsdoc-to-markdown"}}
{{>specific-module-exported name="jsdoc-to-markdown"}}
